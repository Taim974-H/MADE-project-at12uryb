pipeline GTFS{

    StopHttpExtractor
    -> StopFilePicker
    -> StopFileInterpreter
    -> StopCSVInterpreter
    -> LatRangeSelector
    -> StopTableInterpreter
    -> StopLoader;


    block StopHttpExtractor oftype GTFSExtractor{
        url:"https://gtfs.rhoenenergie-bus.de/GTFS.zip";
    }

    block StopFilePicker oftype FilePicker{
        path: ".txt";
    }

    block StopFileInterpreter oftype TextFileInterpreter{
        encoding: "utf8";
    }
    block StopCSVInterpreter oftype CSVInterpreter { }


    block LatRangeSelector oftype CellRangeSelector {
        select: range A1:E*;
    }

    
    valuetype GeoCoordinate oftype text{
        constraints: [
            GeopointFormat,
            InvalidRows
        ];
    }

    constraint GeopointFormat oftype RegexConstraint{
        regex: /^-?(90(\.0+)?|[1-8]?\d(\.\d+)?|0(\.\d+)?|[0]?)$/;
    }

    constraint InvalidRows oftype DenylistConstraint {
        denylist: ["", "Null", "NaN"];
    }

    valuetype ValidZone oftype integer{
        constraints: [
            ZoneFormat
        ];
    }
    constraint  ZoneFormat oftype RegexConstraint{
        //Only keep stops from zone 1645
        regex: /^1645$/;
    }


    block StopTableInterpreter oftype TableInterpreter{
        header: true;
        columns:[
            "stop_id" oftype integer,
            "stop_name" oftype text, //Conditional columns are considered as required
            "stop_lat" oftype GeoCoordinate,
            "stop_lon" oftype GeoCoordinate,
            "zone_id" oftype ValidZone,
        ];
    }

    block StopLoader oftype SQLiteLoader {
        table: "stops";
        file: "./gtfs.sqlite";
    }

    

}