pipeline GoodsPipeline {

	GoodsExtractor
        -> GoodsTextFileInterpreter
		-> GoodsCSVInterpreter 
        -> DeleteMetaDataRows
        -> AddHeader
		-> RenameHeader
	   	-> GoodsTableInterpreter
		-> GoodsLoader;
		
	block GoodsExtractor oftype HttpExtractor {
        url: "https://www-genesis.destatis.de/genesis/downloads/00/tables/46131-0014_00.csv";
	}

	block GoodsTextFileInterpreter oftype TextFileInterpreter{
        encoding:'latin4';
    }

	block GoodsCSVInterpreter oftype CSVInterpreter {
		delimiter: ";";
	}
    
//================================================================================================

//Remove metadata rows (initial description and headers [data starts in row 9], copyright notice in the footer)
    block DeleteMetaDataRows oftype RowDeleter {
		delete: [
			row 0,row 1,row 2,row 3,row 4,row 5,row 6,row 7,
            row 41338, row 41339
		];
	}
// Select only a subset of columns
// Data about time and transported goods: Column A-E
// Data about quantity: Column AT-AU

// Add header names for the first columns A-E
// New names: 'year', 'month', 'goods_id', 'goods_name', 'goods_source'
    block AddHeader oftype CellWriter{
        at:range A1:E1;
        write:['year', 'month', 'goods_id', 'goods_name', 'goods_source'];
    }

// Rename headers for the quantity columns AT-AU
// New names: 'abroad', 'total'
    block RenameHeader oftype CellWriter{
        at: range AT1: AU1;
        write:[ 'abroad', 'total'];
    }

// Choose suitable value types for all columns
// Numeric values must be positive integers
    valuetype PositiveInt oftype integer{constraints : [RangeConstraint,InvalidRows];}
    constraint RangeConstraint oftype RangeConstraint{
         lowerBound:0;
         lowerBoundInclusive:false;
    }

// 'month' must be a German month, capitalized
    valuetype ValidMonth oftype text {constraints: [ValidMonthFormat,InvalidRows];}
    constraint ValidMonthFormat oftype RegexConstraint {
        regex: /\b(Januar|Februar|MÃ¤rz|April|Mai|Juni|Juli|August|September|Oktober|November|Dezember)\b/;
    }

// 'goods_id' must start with NST7-, followed by three numbers or capital letters
    valuetype ValidId oftype text {constraints: [ValidIdFormat,InvalidRows];}
    constraint ValidIdFormat oftype RegexConstraint {
        regex: /^NST7-[0-9A-Z]{3}$/;
    }

// Drop rows with missing or invalid values
    constraint InvalidRows oftype DenylistConstraint {
        denylist: [" ", "Null", "NaN"];
    }

//================================================================================================
	block GoodsTableInterpreter oftype TableInterpreter {
		header: true;
		columns: [
        'year' oftype PositiveInt,
        'month' oftype ValidMonth,
        'goods_id' oftype ValidId,
        'goods_name' oftype text,
        'goods_source' oftype text,
        'abroad' oftype PositiveInt,
        'total' oftype PositiveInt,
      ];
	}

	block GoodsLoader oftype SQLiteLoader {
		table: "goods";
		file: "./goodsTransportedByTrain.sqlite";
	}

}